/**
 * @file %NAME%QtCb.h
 * @brief Header para la clase %NAME%QtCb.
 * @details Fichero generado por generador de código de paneles.
 */
#ifndef __%NAME_CAPS%QTCB_H__
#define __%NAME_CAPS%QTCB_H__

#pragma once

#include <BaseClass.h>
#include <boost/scoped_ptr.hpp>


class ParameterLimitData;

/**
 * @class %NAME%QtCb
 * @brief Clase que hereda de BaseClass, representa un panel con funcionalidad específica.
 */
class %NAME%QtCb : public BaseClass
{
    Q_OBJECT
public:
    /**
     * @brief Constructor de la clase %NAME%QtCb.
     * @param parent Puntero al objeto BaseClass padre (nullptr por defecto).
     */
    %NAME%QtCb(BaseClass* parent = 0);
    /**
     * @brief Destructor de la clase %NAME%QtCb.
     */
    virtual ~%NAME%QtCb();
    
    virtual void init();
    %PANEL_APPLY_H%
    %PANEL_CANCEL_H%
    %PANEL_CHECK_H%
    %PANEL_RESET_H%
    %PANEL_CUSTOM1_H%
    %PANEL_CUSTOM2_H%

private Q_SLOTS:    


protected:
    virtual const ParameterLimitData* exportGetParameterLimit()=0;

private:
    /**
     * @brief Método para inicializar el panel. Añade la funcionalidad de
     * los botones y el layout. 
    */
    void initialize();
    /**
     * @brief Método para conectar los señales y slots.
    */
    void signalsAndSlots();    


private:
    /**
     * @brief Clase privada que contiene los datos privados del panel.
    */
    class PrivateData;
    /**
     * @brief Puntero al objeto PrivateData privado.
    */
    boost::scoped_ptr<PrivateData> p_impl;

};

#endif  // __%NAME_CAPS%QTCB_H__
