#include "%NAME%QtCb.h"
#include "ui_%NAME%.h"


#include <QRegularExpression>
#include <QRegularExpressionValidator>



class %NAME%QtCb::PrivateData
{
    public:
        PrivateData(BaseClass* parent)
        {

        }

        ~PrivateData()
        {}      

        Ui::%NAME% ui;
};


%NAME%QtCb::%NAME%QtCb(BaseClass * parent)
    : BaseClass(parent)
    , p_impl(new PrivateData(parent))
{
    p_impl->ui.setupUi(this);

    initialize();

    signalsAndSlots();

}

%NAME%QtCb::~%NAME%QtCb()
{

}
//----------------------------------------------------------------
void %NAME%QtCb::init()
{
    const ParameterLimitData* limit = exportGetParameterLimit();
    if(limit)
    {

    }
}
//----------------------------------------------------------------
void %NAME%QtCb::initialize()
{   

    addFooterButton(Footer::Button_Apply, p_impl->ui.pbApply);
    addFooterButton(Footer::Button_Cancel, p_impl->ui.pbCancel);

    addComponents(p_impl->ui.layoutBase);
}
//----------------------------------------------------------------
void %NAME%QtCb::initializeToolTips()
{

}
//----------------------------------------------------------------
void %NAME%QtCb::initializeLimits()
{

}
//----------------------------------------------------------------
void %NAME%QtCb::reset()
{

    BaseClass::validate();
}
//----------------------------------------------------------------
void %NAME%QtCb::signalsAndSlots()
{

}

//----------------------------------------------------------------
void %NAME%QtCb::createData()
{

}
//----------------------------------------------------------------
bool %NAME%QtCb::panelCheck()
{
    return true;
}
//----------------------------------------------------------------
void %NAME%QtCb::panelApply()
{
    createData();
 
    reset();    
}
//----------------------------------------------------------------
void %NAME%QtCb::panelCancel()
{
    reset();
}
//--------------------------------------------------------------------------------------------

